import React from 'react';
import { useCalculator } from '../context/CalculatorContext';

interface LandingPageProps {
  onNavigate: () => void;
}

const LandingPage: React.FC<LandingPageProps> = ({ onNavigate }) => {
  const { isDarkMode, toggleDarkMode } = useCalculator();

  const features = [
    {
      icon: 'ЁЯФв',
      title: 'ржмрж╛ржВрж▓рж╛ рж╕ржВржЦрзНржпрж╛ ржЗржиржкрзБржЯ',
      description: 'ржмрж╛ржВрж▓рж╛ рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рж╣ржЬрзЗ ржЧржгржирж╛ ржХрж░рзБржи',
      color: 'from-blue-500 to-blue-600'
    },
    {
      icon: 'тЪб',
      title: 'ржжрзНрж░рзБржд ржЧржгржирж╛',
      description: 'ржХрзАржмрзЛрж░рзНржб ржУ ржнржпрж╝рзЗрж╕ рж╕рж╛ржкрзЛрж░рзНржЯ рж╕рж╣ ржжрзНрж░рзБржд ржХрж╛ржЬ ржХрж░рзБржи',
      color: 'from-green-500 to-green-600'
    },
    {
      icon: 'ЁЯУК',
      title: 'ржмрзИржЬрзНржЮрж╛ржирж┐ржХ ржорзЛржб',
      description: 'рждрзНрж░рж┐ржХрзЛржгржорж┐рждрж┐, рж▓ржЧрж╛рж░рж┐ржжржо ржУ ржЕржирзНржпрж╛ржирзНржп ржлрж╛ржВрж╢ржи',
      color: 'from-purple-500 to-purple-600'
    },
    {
      icon: 'ЁЯМЩ',
      title: 'ржбрж╛рж░рзНржХ ржорзЛржб',
      description: 'ржЪрзЛржЦрзЗрж░ ржЬржирзНржп ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ ржбрж╛рж░рзНржХ ржерж┐ржо',
      color: 'from-gray-700 to-gray-800'
    },
    {
      icon: 'ЁЯУ▒',
      title: 'рж░рзЗрж╕ржкржирж╕рж┐ржн ржбрж┐ржЬрж╛ржЗржи',
      description: 'рж╕ржм ржбрж┐ржнрж╛ржЗрж╕рзЗ ржкрж╛рж░ржлрзЗржХрзНржЯржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ',
      color: 'from-orange-500 to-orange-600'
    },
    {
      icon: 'ЁЯТ╛',
      title: 'ржЗрждрж┐рж╣рж╛рж╕ рж╕ржВрж░ржХрзНрж╖ржг',
      description: 'ржкрзВрж░рзНржмрзЗрж░ ржЧржгржирж╛ржЧрзБрж▓рзЛ ржжрзЗржЦрзБржи ржПржмржВ ржкрзБржирж░рж╛ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
      color: 'from-red-500 to-red-600'
    }
  ];

  return (
    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gradient-to-br from-blue-50 via-white to-green-50'}`}>
      {/* Header */}
      <header className="relative py-8 px-4">
        <div className="max-w-6xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-green-500 rounded-xl flex items-center justify-center text-2xl">
              ЁЯзо
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent">
              ржмрж╛ржВрж▓рж╛ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░
            </h1>
          </div>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={toggleDarkMode}
              className={`p-3 rounded-full transition-all duration-300 ${
                isDarkMode 
                  ? 'bg-yellow-400 text-gray-900 hover:bg-yellow-300' 
                  : 'bg-gray-800 text-white hover:bg-gray-700'
              }`}
            >
              {isDarkMode ? 'тШАя╕П' : 'ЁЯМЩ'}
            </button>
            
            <button 
              onClick={onNavigate}
              className="bg-gradient-to-r from-blue-600 to-green-600 text-white px-6 py-3 rounded-full font-semibold hover:from-blue-700 hover:to-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи тЖТ
            </button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto text-center">
          <h2 className="text-5xl md:text-6xl font-bold mb-6 leading-tight">
            ржПржХржЯрж┐ <span className="bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent">рж╕рзНржорж╛рж░рзНржЯ</span> ржПржмржВ <span className="bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">рж╕рж╣ржЬ</span> ржмрж╛ржВрж▓рж╛ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░
          </h2>
          <p className="text-xl md:text-2xl text-gray-600 mb-8 max-w-3xl mx-auto">
            ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ ржПржоржи ржЖржзрзБржирж┐ржХ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░ред ржпрзЛржЧ, ржмрж┐ржпрж╝рзЛржЧ, ржЧрзБржг, ржнрж╛ржЧ ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржмрзИржЬрзНржЮрж╛ржирж┐ржХ ржЧржгржирж╛ ржкрж░рзНржпржирзНржд рж╕ржмржХрж┐ржЫрзБ ржмрж╛ржВрж▓рж╛ржпрж╝ред
          </p>
          
          <div className="flex flex-col sm:flex-row justify-center gap-4 mb-16">
            <button 
              onClick={onNavigate}
              className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-xl"
            >
              рж╢рзБрж░рзБ ржХрж░рзБржи ЁЯЪА
            </button>
            <button className="border-2 border-blue-600 text-blue-600 px-8 py-4 rounded-xl font-bold text-lg hover:bg-blue-600 hover:text-white transition-all duration-300">
              ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржжрзЗржЦрзБржи
            </button>
          </div>

          {/* Calculator Preview */}
          <div className="relative max-w-md mx-auto">
            <div className={`rounded-2xl shadow-2xl overflow-hidden transform rotate-1 hover:rotate-0 transition-transform duration-300 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
              <div className="p-4 bg-gradient-to-r from-blue-500 to-green-500 text-white">
                <div className="text-right">
                  <div className="text-sm opacity-80">рззрзирзй + рзкрзлрзм</div>
                  <div className="text-2xl font-bold">рзлрзнрзп</div>
                </div>
              </div>
              <div className="grid grid-cols-4 gap-2 p-4">
                {['рзн', 'рзо', 'рзп', '+', 'рзк', 'рзл', 'рзм', '-', 'рзз', 'рзи', 'рзй', '├Ч', 'рзж', '.', '=', '├╖'].map((btn) => (
                  <button key={btn} className="p-3 rounded-lg bg-gray-100 hover:bg-gray-200 font-medium">
                    {btn}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Grid */}
      <section className="py-16 px-4">
        <div className="max-w-6xl mx-auto">
          <h3 className="text-4xl font-bold text-center mb-12">ржЖржорж╛ржжрзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣</h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <div 
                key={index}
                className={`rounded-2xl p-6 text-white bg-gradient-to-br ${feature.color} transform hover:scale-105 transition-all duration-300 shadow-lg`}
              >
                <div className="text-4xl mb-4">{feature.icon}</div>
                <h4 className="text-xl font-bold mb-2">{feature.title}</h4>
                <p className="opacity-90">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className={`py-8 px-4 border-t ${isDarkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
        <div className="max-w-6xl mx-auto text-center">
          <p className="text-gray-600">
            рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржкрзНрж░рзЗржорзАржжрзЗрж░ ржЬржирзНржп тЭдя╕П | ┬й рзирзжрзирзк ржмрж╛ржВрж▓рж╛ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯрж░
          </p>
        </div>
      </footer>
    </div>
  );
};

export default LandingPage;